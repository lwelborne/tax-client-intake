{
  "info": {
    "name": "Tax Client Intake API", // Collection name in Postman
    "_postman_id": "a1b2c3d4-5678-90ab-cdef-1234567890ff", // Unique Postman ID
    "description": "Postman collection for testing CRUD operations on the Tax Client Intake API with auto-validation, including error cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "T01 - Create Client", // Test creating a new client
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Lenora Welborne\",\n  \"email\": \"softwareNora@demo.com\",\n  \"phone\": \"301-333-3333\"\n}"
        },
        "url": {
          "raw": "http://localhost:5000/api/clients",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            // Postman test scripts
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);", // Ensure creation success
              "});",
              "pm.test(\"Response has name, email, and phone\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('name', 'Lenora Welborne');",
              "    pm.expect(jsonData).to.have.property('email', 'softwareNora@demo.com');",
              "    pm.expect(jsonData).to.have.property('phone', '301-333-3333');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "T02 - Get All Clients", // Test fetching all clients
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:5000/api/clients",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "T03 - Get Client by ID", // Test fetching a specific client
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:5000/api/clients/:id", // Replace :id with real MongoDB _id
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients", ":id"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has correct client ID\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('_id');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "T04 - Update Client by ID", // Test updating client info
      "request": {
        "method": "PUT",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"phone\": \"301-555-5555\"\n}"
        },
        "url": {
          "raw": "http://localhost:5000/api/clients/:id",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients", ":id"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Phone number updated correctly\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('phone', '301-555-5555');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "T05 - Delete Client by ID", // Test deleting a client
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "http://localhost:5000/api/clients/:id",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients", ":id"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has delete confirmation message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.contain('deleted');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "T06 - Invalid Client ID", // Test error handling for bad ID
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:5000/api/clients/123", // Not a valid ObjectId
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients", "123"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400 or 404\", function () {",
              "    pm.expect([400,404]).to.include(pm.response.code);",
              "});",
              "pm.test(\"Error message is returned\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "T07 - Invalid Data on Create", // Test validation errors
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"\",\n  \"email\": \"bademail\",\n  \"phone\": \"\"\n}"
        },
        "url": {
          "raw": "http://localhost:5000/api/clients",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "clients"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test(\"Validation errors are returned\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "    pm.expect(jsonData.errors).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
